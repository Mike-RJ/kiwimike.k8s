---
- name: Setup Helm
  block:
    
    - name: Setup Helm GPG Key
      ansible.builtin.apt_key:
        url: "https://baltocdn.com/helm/signing.asc"
        keyring: "/usr/share/keyrings/helm.gpg"
        state: present
    
    - name: Setup Helm Repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main"
        state: present
    
    - name: Install Helm packages
      ansible.builtin.apt:
        name: "{{ required_packages.helm }}"
        state: present
        update_cache: true
    
    - name: Lock helm version
      ansible.builtin.dpkg_selections:
        name: "{{ item | regex_replace('[^A-Za-z]', '') }}"
        selection: hold
      loop: "{{ required_packages.helm }}"
      

- name: Initialise Kubernetes Cluster
  block:

    # - name: Initialise Kubernetes Cluster with Kubeadm
    #   command: "kubeadm init --pod-network-cidr={{ pod_network_cidr }} --apiserver-advertise-address={{ ansible_facts.default_ipv4.address }} --ignore-preflight-errors=Mem"
    #   #run_once: true
    #   register: kubeadm_command
    #   when: ansible_local.kubernetes.node.control_plane is not defined or not ansible_local.kubernetes.node.control_plane | bool

    - name: Initialise Kubernetes Cluster with Kubeadm
      command: "kubeadm init --pod-network-cidr={{ pod_network_cidr }} --ignore-preflight-errors=Mem"
      #run_once: true
      register: kubeadm_command
      #when: not ansible_local.kubernetes.node.control_plane

    
    - name: Add Helm Repository for Cilium
      kubernetes.core.helm_repository:
        name: cilium
        repo_url: https://helm.cilium.io/
      run_once: true
    
    - name: Install Cilium
      kubernetes.core.helm:
        name: cilium
        chart_ref: cilium/cilium
        release_namespace: kube-system
        chart_version: "{{ cni.cilium_version }}"
        kubeconfig: "{{ kubernetes_config }}"
      run_once: true
      notify:
        - Write bootstrapped fact

  when:
    - ansible_facts.hostname == bootstrap_node
  
  always:

    - name: Update fact
      ansible.builtin.lineinfile:
        line: "control_plane=true"
        path: /etc/ansible/facts.d/kubernetes.fact
          

- name: Save Join Command
  block:

    - name: Generate Join Command
      ansible.builtin.command: kubeadm token create --print-join-command
      register: join_command
    
    - name: Set Fact
      ansible.builtin.set_fact:
        join_command: "{{ join_command.stdout_lines[0] }}"
  
  # when:
  #   - ansible_facts.hostname == bootstrap_node
